debug: false # log가 너무 많이 올라와서 false
management.endpoint.web.exposure.include: "*" # spring actuator의 엔드포인트에 감춰진 것들을 모두 활성화 시켜줌
# actuator : 실행 중인 application의 내부를 볼 수 있게하고, 어느정도의 application의 작동 방법을 제어할 수 있게 해줌
# ㄴ application의 속성, 패키지의 로깅 레벨, 사용중인 메모리, 지정된 엔드포인트가 받은 요청 횟수 등

logging:
  level:
    com.fastcampus.boardproject: debug # 이 패키지 레벨에서 발생하는 로그들은 debug 레벨로 보겠음
    org.springframework.web.servlet: debug # response, request 로그만 debug로 뽑아볼 수 있음
    org.hibernate.type.descriptor.sql.BasicBinder: trace # jpa 사용 시 쿼리 로그를 볼 수 있는데 쿼리에 어떤 파라미터가 들어갔는지 원래는 ?로 뜨는데 trace로 하면 실제 파라미터를 볼 수 있음

spring:
  datasource: # db 접근 속성
    url: jdbc:mysql://localhost:3306/board
    username: "un"
    password: "0000"
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    defer-datasource-initialization: true # data.sql을 생성할 수 있게함. Test용 db를 띄울때 맨 처음에 초기값으로 실행되었으면 하는 쿼리들을 올려놓을 수 있음.
    hibernate.ddl-auto: create # test가 실행될 때 entity만 보고 자동으로 table을 만들어 줌
    show-sql: true # sql 쿼리 debug에서 볼지 말지
    properties:
      # TODO : hibernate orm 공부
      hibernate.format_sql: true # 내가 사용하는 구현체에서 따로 전용으로 사용되고 있는 프로퍼티가 있는 경우에 여기 넣어서 활성화
      # hibernate에서 사용되는 좀 더 복잡한 프로퍼티는 스프링에서 지원하지 않기 때문에 이 속성값에 넣어서 사용할 수 있게됨
      hibernate.default_batch_fetch_size: 100 # Jpa에서 복잡한 연관관계가 매핑되어있는 쿼리를 사용하면 한번에 벌크로 select를 할 수 있게 해주는 옵션
      # TODO : N+1 quary문제 공부
  h2.console.enabled: false # h2 웹 콘솔 활성화 할건지
  sql.init.mode: always # data.sql을 언제 작동시킬 것인가에 대한 룰 (NEVER : 사용안함, EMBEDDED : Test 환경에서만 작동, ALWAYS : 항상 작동시킨다)
  data: # rest test를 hal으로 할건데, 기본 url은 localhost:8080/api이고, @RepositoryRestResource 어노테이션이 붙어있는것만 노출시키겠다.
    rest:
      base-path: /api
      detection-strategy: annotated



--- # yaml 에서는 ---로 하나의 파일에서 document를 나눌 수 있음
# spring:
  # config.activate.on-profile: testdb # testdb profile로 activate 되면 이 문서를 읽으셈
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql
#    driverClassName: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none
